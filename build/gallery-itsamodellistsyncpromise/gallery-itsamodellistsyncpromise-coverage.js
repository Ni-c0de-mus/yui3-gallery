if (typeof __coverage__ === 'undefined') { __coverage__ = {}; }
if (!__coverage__['build/gallery-itsamodellistsyncpromise/gallery-itsamodellistsyncpromise.js']) {
   __coverage__['build/gallery-itsamodellistsyncpromise/gallery-itsamodellistsyncpromise.js'] = {"path":"build/gallery-itsamodellistsyncpromise/gallery-itsamodellistsyncpromise.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0,0],"23":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":44},"end":{"line":1,"column":63}}},"2":{"name":"(anonymous_2)","line":105,"loc":{"start":{"line":105,"column":13},"end":{"line":105,"column":33}}},"3":{"name":"(anonymous_3)","line":366,"loc":{"start":{"line":366,"column":4},"end":{"line":366,"column":17}}},"4":{"name":"(anonymous_4)","line":367,"loc":{"start":{"line":367,"column":35},"end":{"line":367,"column":63}}},"5":{"name":"(anonymous_5)","line":374,"loc":{"start":{"line":374,"column":16},"end":{"line":374,"column":35}}},"6":{"name":"(anonymous_6)","line":377,"loc":{"start":{"line":377,"column":16},"end":{"line":377,"column":30}}},"7":{"name":"(anonymous_7)","line":384,"loc":{"start":{"line":384,"column":43},"end":{"line":384,"column":62}}},"8":{"name":"(anonymous_8)","line":399,"loc":{"start":{"line":399,"column":38},"end":{"line":399,"column":62}}},"9":{"name":"(anonymous_9)","line":403,"loc":{"start":{"line":403,"column":28},"end":{"line":403,"column":55}}},"10":{"name":"(anonymous_10)","line":420,"loc":{"start":{"line":420,"column":8},"end":{"line":420,"column":29}}},"11":{"name":"(anonymous_11)","line":454,"loc":{"start":{"line":454,"column":44},"end":{"line":454,"column":56}}},"12":{"name":"(anonymous_12)","line":460,"loc":{"start":{"line":460,"column":8},"end":{"line":460,"column":24}}},"13":{"name":"(anonymous_13)","line":466,"loc":{"start":{"line":466,"column":8},"end":{"line":466,"column":27}}},"14":{"name":"(anonymous_14)","line":469,"loc":{"start":{"line":469,"column":8},"end":{"line":469,"column":22}}},"15":{"name":"(anonymous_15)","line":517,"loc":{"start":{"line":517,"column":4},"end":{"line":517,"column":24}}},"16":{"name":"(anonymous_16)","line":518,"loc":{"start":{"line":518,"column":48},"end":{"line":518,"column":61}}},"17":{"name":"(anonymous_17)","line":524,"loc":{"start":{"line":524,"column":22},"end":{"line":524,"column":36}}},"18":{"name":"(anonymous_18)","line":533,"loc":{"start":{"line":533,"column":26},"end":{"line":533,"column":45}}},"19":{"name":"(anonymous_19)","line":560,"loc":{"start":{"line":560,"column":49},"end":{"line":560,"column":74}}},"20":{"name":"(anonymous_20)","line":595,"loc":{"start":{"line":595,"column":35},"end":{"line":595,"column":47}}},"21":{"name":"(anonymous_21)","line":600,"loc":{"start":{"line":600,"column":8},"end":{"line":600,"column":24}}},"22":{"name":"(anonymous_22)","line":608,"loc":{"start":{"line":608,"column":8},"end":{"line":608,"column":27}}},"23":{"name":"(anonymous_23)","line":611,"loc":{"start":{"line":611,"column":8},"end":{"line":611,"column":22}}},"24":{"name":"(anonymous_24)","line":635,"loc":{"start":{"line":635,"column":37},"end":{"line":635,"column":49}}},"25":{"name":"(anonymous_25)","line":641,"loc":{"start":{"line":641,"column":8},"end":{"line":641,"column":24}}},"26":{"name":"(anonymous_26)","line":649,"loc":{"start":{"line":649,"column":8},"end":{"line":649,"column":27}}},"27":{"name":"(anonymous_27)","line":652,"loc":{"start":{"line":652,"column":8},"end":{"line":652,"column":22}}},"28":{"name":"(anonymous_28)","line":667,"loc":{"start":{"line":667,"column":43},"end":{"line":667,"column":60}}},"29":{"name":"(anonymous_29)","line":749,"loc":{"start":{"line":749,"column":37},"end":{"line":749,"column":58}}},"30":{"name":"(anonymous_30)","line":753,"loc":{"start":{"line":753,"column":39},"end":{"line":753,"column":58}}},"31":{"name":"(anonymous_31)","line":755,"loc":{"start":{"line":755,"column":22},"end":{"line":755,"column":38}}},"32":{"name":"(anonymous_32)","line":768,"loc":{"start":{"line":768,"column":53},"end":{"line":768,"column":65}}},"33":{"name":"(anonymous_33)","line":797,"loc":{"start":{"line":797,"column":68},"end":{"line":797,"column":86}}},"34":{"name":"(anonymous_34)","line":800,"loc":{"start":{"line":800,"column":60},"end":{"line":800,"column":72}}},"35":{"name":"(anonymous_35)","line":823,"loc":{"start":{"line":823,"column":30},"end":{"line":823,"column":48}}},"36":{"name":"(anonymous_36)","line":827,"loc":{"start":{"line":827,"column":8},"end":{"line":827,"column":25}}},"37":{"name":"(anonymous_37)","line":836,"loc":{"start":{"line":836,"column":23},"end":{"line":836,"column":39}}},"38":{"name":"(anonymous_38)","line":852,"loc":{"start":{"line":852,"column":34},"end":{"line":852,"column":46}}},"39":{"name":"(anonymous_39)","line":868,"loc":{"start":{"line":868,"column":43},"end":{"line":868,"column":69}}},"40":{"name":"(anonymous_40)","line":874,"loc":{"start":{"line":874,"column":36},"end":{"line":874,"column":63}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":897,"column":3}},"2":{"start":{"line":21,"column":3},"end":{"line":119,"column":6}},"3":{"start":{"line":106,"column":8},"end":{"line":117,"column":9}},"4":{"start":{"line":107,"column":12},"end":{"line":116,"column":13}},"5":{"start":{"line":108,"column":16},"end":{"line":108,"column":46}},"6":{"start":{"line":110,"column":16},"end":{"line":114,"column":19}},"7":{"start":{"line":115,"column":16},"end":{"line":115,"column":26}},"8":{"start":{"line":118,"column":8},"end":{"line":118,"column":30}},"9":{"start":{"line":364,"column":0},"end":{"line":388,"column":2}},"10":{"start":{"line":367,"column":8},"end":{"line":383,"column":10}},"11":{"start":{"line":368,"column":12},"end":{"line":369,"column":24}},"12":{"start":{"line":373,"column":12},"end":{"line":380,"column":14}},"13":{"start":{"line":375,"column":20},"end":{"line":375,"column":45}},"14":{"start":{"line":378,"column":20},"end":{"line":378,"column":34}},"15":{"start":{"line":382,"column":12},"end":{"line":382,"column":28}},"16":{"start":{"line":384,"column":8},"end":{"line":386,"column":10}},"17":{"start":{"line":385,"column":12},"end":{"line":385,"column":52}},"18":{"start":{"line":399,"column":0},"end":{"line":436,"column":2}},"19":{"start":{"line":400,"column":4},"end":{"line":401,"column":61}},"20":{"start":{"line":403,"column":4},"end":{"line":406,"column":7}},"21":{"start":{"line":404,"column":8},"end":{"line":404,"column":33}},"22":{"start":{"line":405,"column":8},"end":{"line":405,"column":31}},"23":{"start":{"line":409,"column":4},"end":{"line":416,"column":6}},"24":{"start":{"line":418,"column":4},"end":{"line":423,"column":6}},"25":{"start":{"line":421,"column":12},"end":{"line":421,"column":38}},"26":{"start":{"line":425,"column":4},"end":{"line":432,"column":82}},"27":{"start":{"line":434,"column":4},"end":{"line":434,"column":38}},"28":{"start":{"line":435,"column":4},"end":{"line":435,"column":19}},"29":{"start":{"line":454,"column":0},"end":{"line":474,"column":2}},"30":{"start":{"line":455,"column":4},"end":{"line":457,"column":28}},"31":{"start":{"line":459,"column":4},"end":{"line":463,"column":6}},"32":{"start":{"line":461,"column":12},"end":{"line":461,"column":60}},"33":{"start":{"line":464,"column":4},"end":{"line":472,"column":6}},"34":{"start":{"line":467,"column":12},"end":{"line":467,"column":39}},"35":{"start":{"line":470,"column":12},"end":{"line":470,"column":44}},"36":{"start":{"line":473,"column":4},"end":{"line":473,"column":21}},"37":{"start":{"line":515,"column":0},"end":{"line":572,"column":2}},"38":{"start":{"line":518,"column":8},"end":{"line":570,"column":10}},"39":{"start":{"line":519,"column":12},"end":{"line":522,"column":37}},"40":{"start":{"line":524,"column":12},"end":{"line":532,"column":14}},"41":{"start":{"line":525,"column":16},"end":{"line":529,"column":18}},"42":{"start":{"line":530,"column":16},"end":{"line":530,"column":53}},"43":{"start":{"line":531,"column":16},"end":{"line":531,"column":48}},"44":{"start":{"line":533,"column":12},"end":{"line":551,"column":14}},"45":{"start":{"line":534,"column":16},"end":{"line":534,"column":27}},"46":{"start":{"line":535,"column":16},"end":{"line":535,"column":38}},"47":{"start":{"line":536,"column":16},"end":{"line":536,"column":42}},"48":{"start":{"line":537,"column":16},"end":{"line":540,"column":17}},"49":{"start":{"line":539,"column":20},"end":{"line":539,"column":49}},"50":{"start":{"line":541,"column":16},"end":{"line":541,"column":34}},"51":{"start":{"line":544,"column":16},"end":{"line":549,"column":17}},"52":{"start":{"line":545,"column":20},"end":{"line":545,"column":50}},"53":{"start":{"line":548,"column":20},"end":{"line":548,"column":52}},"54":{"start":{"line":550,"column":16},"end":{"line":550,"column":43}},"55":{"start":{"line":552,"column":12},"end":{"line":568,"column":13}},"56":{"start":{"line":554,"column":16},"end":{"line":557,"column":18}},"57":{"start":{"line":560,"column":16},"end":{"line":567,"column":19}},"58":{"start":{"line":561,"column":20},"end":{"line":566,"column":21}},"59":{"start":{"line":562,"column":24},"end":{"line":562,"column":37}},"60":{"start":{"line":565,"column":24},"end":{"line":565,"column":46}},"61":{"start":{"line":569,"column":12},"end":{"line":569,"column":29}},"62":{"start":{"line":595,"column":0},"end":{"line":616,"column":2}},"63":{"start":{"line":596,"column":4},"end":{"line":598,"column":28}},"64":{"start":{"line":599,"column":4},"end":{"line":605,"column":6}},"65":{"start":{"line":601,"column":12},"end":{"line":603,"column":13}},"66":{"start":{"line":602,"column":16},"end":{"line":602,"column":58}},"67":{"start":{"line":606,"column":4},"end":{"line":614,"column":6}},"68":{"start":{"line":609,"column":12},"end":{"line":609,"column":39}},"69":{"start":{"line":612,"column":12},"end":{"line":612,"column":44}},"70":{"start":{"line":615,"column":4},"end":{"line":615,"column":21}},"71":{"start":{"line":635,"column":0},"end":{"line":657,"column":2}},"72":{"start":{"line":636,"column":4},"end":{"line":638,"column":28}},"73":{"start":{"line":640,"column":4},"end":{"line":646,"column":6}},"74":{"start":{"line":643,"column":12},"end":{"line":643,"column":81}},"75":{"start":{"line":647,"column":4},"end":{"line":655,"column":6}},"76":{"start":{"line":650,"column":12},"end":{"line":650,"column":39}},"77":{"start":{"line":653,"column":12},"end":{"line":653,"column":44}},"78":{"start":{"line":656,"column":4},"end":{"line":656,"column":21}},"79":{"start":{"line":667,"column":0},"end":{"line":677,"column":2}},"80":{"start":{"line":668,"column":4},"end":{"line":668,"column":24}},"81":{"start":{"line":671,"column":4},"end":{"line":675,"column":5}},"82":{"start":{"line":672,"column":8},"end":{"line":674,"column":11}},"83":{"start":{"line":676,"column":4},"end":{"line":676,"column":33}},"84":{"start":{"line":749,"column":0},"end":{"line":839,"column":2}},"85":{"start":{"line":750,"column":4},"end":{"line":751,"column":46}},"86":{"start":{"line":753,"column":4},"end":{"line":753,"column":74}},"87":{"start":{"line":753,"column":60},"end":{"line":753,"column":70}},"88":{"start":{"line":755,"column":4},"end":{"line":834,"column":6}},"89":{"start":{"line":756,"column":8},"end":{"line":766,"column":20}},"90":{"start":{"line":768,"column":8},"end":{"line":833,"column":11}},"91":{"start":{"line":769,"column":12},"end":{"line":769,"column":38}},"92":{"start":{"line":771,"column":12},"end":{"line":773,"column":26}},"93":{"start":{"line":775,"column":16},"end":{"line":775,"column":46}},"94":{"start":{"line":776,"column":16},"end":{"line":776,"column":52}},"95":{"start":{"line":778,"column":12},"end":{"line":778,"column":44}},"96":{"start":{"line":779,"column":12},"end":{"line":787,"column":13}},"97":{"start":{"line":780,"column":16},"end":{"line":786,"column":17}},"98":{"start":{"line":781,"column":20},"end":{"line":785,"column":21}},"99":{"start":{"line":782,"column":24},"end":{"line":782,"column":60}},"100":{"start":{"line":789,"column":12},"end":{"line":792,"column":13}},"101":{"start":{"line":790,"column":16},"end":{"line":790,"column":63}},"102":{"start":{"line":791,"column":16},"end":{"line":791,"column":69}},"103":{"start":{"line":796,"column":12},"end":{"line":825,"column":19}},"104":{"start":{"line":798,"column":20},"end":{"line":798,"column":33}},"105":{"start":{"line":804,"column":20},"end":{"line":804,"column":46}},"106":{"start":{"line":805,"column":20},"end":{"line":813,"column":21}},"107":{"start":{"line":806,"column":24},"end":{"line":812,"column":25}},"108":{"start":{"line":807,"column":28},"end":{"line":811,"column":29}},"109":{"start":{"line":808,"column":32},"end":{"line":808,"column":68}},"110":{"start":{"line":815,"column":20},"end":{"line":819,"column":21}},"111":{"start":{"line":816,"column":24},"end":{"line":818,"column":25}},"112":{"start":{"line":817,"column":28},"end":{"line":817,"column":35}},"113":{"start":{"line":824,"column":20},"end":{"line":824,"column":33}},"114":{"start":{"line":828,"column":12},"end":{"line":831,"column":14}},"115":{"start":{"line":832,"column":12},"end":{"line":832,"column":49}},"116":{"start":{"line":836,"column":4},"end":{"line":838,"column":6}},"117":{"start":{"line":837,"column":8},"end":{"line":837,"column":40}},"118":{"start":{"line":852,"column":0},"end":{"line":854,"column":2}},"119":{"start":{"line":853,"column":4},"end":{"line":853,"column":51}},"120":{"start":{"line":868,"column":0},"end":{"line":880,"column":2}},"121":{"start":{"line":869,"column":4},"end":{"line":870,"column":22}},"122":{"start":{"line":872,"column":4},"end":{"line":872,"column":56}},"123":{"start":{"line":873,"column":4},"end":{"line":878,"column":5}},"124":{"start":{"line":874,"column":8},"end":{"line":877,"column":11}},"125":{"start":{"line":875,"column":12},"end":{"line":875,"column":118}},"126":{"start":{"line":876,"column":12},"end":{"line":876,"column":44}},"127":{"start":{"line":879,"column":4},"end":{"line":879,"column":23}},"128":{"start":{"line":883,"column":0},"end":{"line":883,"column":79}}},"branchMap":{"1":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":8},"end":{"line":106,"column":8}},{"start":{"line":106,"column":8},"end":{"line":106,"column":8}}]},"2":{"line":118,"type":"binary-expr","locations":[{"start":{"line":118,"column":15},"end":{"line":118,"column":23}},{"start":{"line":118,"column":27},"end":{"line":118,"column":29}}]},"3":{"line":373,"type":"binary-expr","locations":[{"start":{"line":373,"column":13},"end":{"line":373,"column":50}},{"start":{"line":373,"column":55},"end":{"line":373,"column":63}},{"start":{"line":373,"column":67},"end":{"line":380,"column":13}}]},"4":{"line":418,"type":"binary-expr","locations":[{"start":{"line":418,"column":5},"end":{"line":418,"column":30}},{"start":{"line":418,"column":35},"end":{"line":423,"column":5}}]},"5":{"line":425,"type":"binary-expr","locations":[{"start":{"line":425,"column":4},"end":{"line":425,"column":28}},{"start":{"line":425,"column":33},"end":{"line":432,"column":80}}]},"6":{"line":520,"type":"cond-expr","locations":[{"start":{"line":520,"column":54},"end":{"line":520,"column":64}},{"start":{"line":520,"column":67},"end":{"line":520,"column":71}}]},"7":{"line":537,"type":"if","locations":[{"start":{"line":537,"column":16},"end":{"line":537,"column":16}},{"start":{"line":537,"column":16},"end":{"line":537,"column":16}}]},"8":{"line":544,"type":"if","locations":[{"start":{"line":544,"column":16},"end":{"line":544,"column":16}},{"start":{"line":544,"column":16},"end":{"line":544,"column":16}}]},"9":{"line":544,"type":"binary-expr","locations":[{"start":{"line":544,"column":21},"end":{"line":544,"column":43}},{"start":{"line":544,"column":48},"end":{"line":544,"column":62}}]},"10":{"line":552,"type":"if","locations":[{"start":{"line":552,"column":12},"end":{"line":552,"column":12}},{"start":{"line":552,"column":12},"end":{"line":552,"column":12}}]},"11":{"line":561,"type":"if","locations":[{"start":{"line":561,"column":20},"end":{"line":561,"column":20}},{"start":{"line":561,"column":20},"end":{"line":561,"column":20}}]},"12":{"line":601,"type":"if","locations":[{"start":{"line":601,"column":12},"end":{"line":601,"column":12}},{"start":{"line":601,"column":12},"end":{"line":601,"column":12}}]},"13":{"line":643,"type":"binary-expr","locations":[{"start":{"line":643,"column":12},"end":{"line":643,"column":31}},{"start":{"line":643,"column":35},"end":{"line":643,"column":80}}]},"14":{"line":671,"type":"if","locations":[{"start":{"line":671,"column":4},"end":{"line":671,"column":4}},{"start":{"line":671,"column":4},"end":{"line":671,"column":4}}]},"15":{"line":778,"type":"binary-expr","locations":[{"start":{"line":778,"column":23},"end":{"line":778,"column":31}},{"start":{"line":778,"column":35},"end":{"line":778,"column":43}}]},"16":{"line":779,"type":"if","locations":[{"start":{"line":779,"column":12},"end":{"line":779,"column":12}},{"start":{"line":779,"column":12},"end":{"line":779,"column":12}}]},"17":{"line":789,"type":"if","locations":[{"start":{"line":789,"column":12},"end":{"line":789,"column":12}},{"start":{"line":789,"column":12},"end":{"line":789,"column":12}}]},"18":{"line":789,"type":"binary-expr","locations":[{"start":{"line":789,"column":16},"end":{"line":789,"column":34}},{"start":{"line":789,"column":38},"end":{"line":789,"column":57}}]},"19":{"line":796,"type":"cond-expr","locations":[{"start":{"line":797,"column":16},"end":{"line":799,"column":18}},{"start":{"line":800,"column":16},"end":{"line":825,"column":18}}]},"20":{"line":805,"type":"if","locations":[{"start":{"line":805,"column":20},"end":{"line":805,"column":20}},{"start":{"line":805,"column":20},"end":{"line":805,"column":20}}]},"21":{"line":815,"type":"if","locations":[{"start":{"line":815,"column":20},"end":{"line":815,"column":20}},{"start":{"line":815,"column":20},"end":{"line":815,"column":20}}]},"22":{"line":829,"type":"binary-expr","locations":[{"start":{"line":829,"column":27},"end":{"line":829,"column":33}},{"start":{"line":829,"column":38},"end":{"line":829,"column":52}},{"start":{"line":829,"column":56},"end":{"line":829,"column":62}}]},"23":{"line":873,"type":"if","locations":[{"start":{"line":873,"column":4},"end":{"line":873,"column":4}},{"start":{"line":873,"column":4},"end":{"line":873,"column":4}}]}},"code":["(function () { YUI.add('gallery-itsamodellistsyncpromise', function (Y, NAME) {","","'use strict';","","/*jshint maxlen:175 */","","/**"," *"," * This module extends Y.ModelList by introducing Promised sync-methods. It also transforms Y.ModelList's sync-events into true events"," * with a defaultFunc which can be prevented. This means the 'on'-events will be fired before syncing and the 'after'-events after syncing."," *"," * @module gallery-itsamodellistsyncpromise"," * @class Y.ModelList"," * @constructor"," * @since 0.1"," *"," * <i>Copyright (c) 2013 Marco Asbreuk - http://itsasbreuk.nl</i>"," * YUI BSD License - http://developer.yahoo.com/yui/license.html"," *","*/","   var YModelList = Y.ModelList,","       YArray = Y.Array,","       YObject = Y.Object,","       PUBLISHED = '_published',","       READ = 'read',","       APPEND = 'append',","       READAPPEND = READ+APPEND,","       DEFFN = '_defFn_',","   /**","     * Fired when an error occurs, such as when an attribute (or property) doesn't validate or when","     * the sync layer submit-function returns an error.","     * @event error","     * @param e {EventFacade} Event Facade including:","     * @param e.error {any} Error message.","     * @param e.src {String} Source of the error. May be one of the following (or any","     *                     custom error source defined by a Model subclass):","     *","     * `submit`: An error submitting the model from within a sync layer.","     *","     * `attributevalidation`: An error validating an attribute (or property). The attribute (or objectproperty)","     *                        that failed validation will be provided as the `attribute` property on the event facade.","     *","     * @param e.attribute {String} The attribute/property that failed validation.","     * @param e.validationerror {String} The errormessage in case of attribute-validation error.","    **/","    ERROR = 'error',","","    /**","     * Fired when all changed models of the modellist are saved through the Model-sync layer.","     * @event save","     * @param e {EventFacade} Event Facade including:","     * @param e.promise {Y.Promise} promise passed by with the eventobject","     * @param e.promiseReject {Function} handle to the reject-method","     * @param e.promiseResolve {Function} handle to the resolve-method","     * @since 0.1","    **/","    SAVE = 'save',","","   /**","     * Fired when models are submitted through the Model-sync layer.","     * @event submit","     * @param e {EventFacade} Event Facade including:","     * @param e.promise {Y.Promise} promise passed by with the eventobject","     * @param e.promiseReject {Function} handle to the reject-method","     * @param e.promiseResolve {Function} handle to the resolve-method","     * @since 0.1","    **/","    SUBMIT = 'submit',","","   /**","     * Fired when models are read from the ModelList-sync layer.","     * @event load","     * @param e {EventFacade} Event Facade including:","     * @param e.promise {Y.Promise} promise passed by with the eventobject","     * @param e.promiseReject {Function} handle to the reject-method","     * @param e.promiseResolve {Function} handle to the resolve-method","     * @since 0.1","    **/","    LOAD = 'load',","","   /**","     * Fired when models are appended to the ModelList by the ModelList-sync layer.","     * @event loadappend","     * @param e {EventFacade} Event Facade including:","     * @param e.promise {Y.Promise} promise passed by with the eventobject","     * @param e.promiseReject {Function} handle to the reject-method","     * @param e.promiseResolve {Function} handle to the resolve-method","     * @since 0.1","    **/","    LOADAPPEND = LOAD+APPEND,","","   /**","     * Fired when models are destroyed from the ModelList-sync layer.","     * @event destroymodels","     * @param e {EventFacade} Event Facade including:","     * @param e.promise {Y.Promise} promise passed by with the eventobject","     * @param e.promiseReject {Function} handle to the reject-method","     * @param e.promiseResolve {Function} handle to the resolve-method","     * @since 0.1","    **/","    DESTROY = 'destroy',","    DESTROYMODELS = DESTROY+'models',","    PROMISE = 'Promise',","","    PARSED = function (response) {","        if (typeof response === 'string') {","            try {","                return Y.JSON.parse(response);","            } catch (ex) {","                this.fire(ERROR, {","                    error   : ex,","                    response: response,","                    src     : 'parse'","                });","                return {};","            }","        }","        return response || {};","    };","","/**","  * Destroys this model instance and removes it from its containing lists, if any. The 'callback', if one is provided,","  * will be called after the model is destroyed.<br /><br />","  * If `options.remove` is `true`, then this method delegates to the `sync()` method to delete the model from the persistence layer, which is an","  * asynchronous action. In this case, the 'callback' (if provided) will be called after the sync layer indicates success or failure of the delete operation.","  * <br /><br />","  * To keep track of the proccess, it is preferable to use <b>destroyPromise()</b>.<br />","  * This method will fire an `error` event when syncing (using options.remove=true) should fail.","  * <br /><br />","  * <b>CAUTION</b> The sync-method with action 'destroy' <b>must call its callback-function</b> in order to work as espected!","  *","  * @method destroymodels","  * @param {Object} [options] Sync options. It's up to the custom sync implementation to determine what options it supports or requires, if any.","  *   @param {Boolean} [options.remove=false] If `true`, the model will be deleted via the sync layer in addition to the instance being destroyed.","  * @param {callback} [callback] Called after the model has been destroyed (and deleted via the sync layer if `options.remove` is `true`).","  *   @param {Error|null} callback.err If an error occurred, this parameter will contain the error. Otherwise 'err' will be null.","  *   @param {Any} callback.response The server's response. This value will be passed to the `parse()` method, which is expected to parse it and return an attribute hash.","  * @chainable","*/","","/**"," * Destroys this model instance and removes it from its containing lists, if any."," * <br /><br />"," * If `options.remove` is `true`, then this method delegates to the `sync()`"," * method to delete the model from the persistence layer, which is an"," * asynchronous action."," * <br /><br />","  * This method will fire an `error` event when syncing (using options.remove=true) should fail."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'destroy' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method destroymodelsPromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason). (examine reason.message).","**/","","/**"," * Destroys this model instance and removes it from its containing lists, if any."," * <br /><br />"," * Deprecated, use destroyModelsPromise instead (as long as available both methods ect the same)."," * <br /><br />","  * This method will fire an `error` event when syncing (using options.remove=true) should fail."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'destroy' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method destroyPromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason). (examine reason.message)."," * @deprecated","**/","","/**","  * Loads this model from the server.<br />","  * This method delegates to the `sync()` method to perform the actual load","  * operation, which is an asynchronous action. Specify a 'callback' function to","  * be notified of success or failure.","  * <br /><br />","  * An unsuccessful load operation will fire an `error` event with the `src` value \"load\".","  * <br /><br />","  * If the load operation succeeds and one or more of the loaded attributes","  * differ from this model's current attributes, a `change` event will be fired.","  * <br /><br />","  * To keep track of the proccess, it is preferable to use <b>loadPromise()</b>.<br />","  * This method will fire 2 events: 'loadstart' before syncing and 'load' or ERROR after syncing.","  * <br /><br />","  * <b>CAUTION</b> The sync-method with action 'load' <b>must call its callback-function</b> in order to work as espected!","  *","  * @method load","  * @param {Object} [options] Options to be passed to `sync()` and to `set()` when setting the loaded attributes.","  *                           It's up to the custom sync implementation to determine what options it supports or requires, if any.","  * @param {callback} [callback] Called when the sync operation finishes.","  *   @param {Error|null} callback.err If an error occurred, this parameter will contain the error. If the sync operation succeeded, 'err' will be null.","  *   @param {Any} callback.response The server's response. This value will be passed to the `parse()` method, which is expected to parse it and return an attribute hash.","  * @chainable"," */","","/**"," * Loads this model from the server."," * <br /><br />"," * This method delegates to the `sync()` method to perform the actual load"," * operation, which is an asynchronous action."," * <br /><br />"," * An unsuccessful load operation will fire an `error` event with the `src` value \"load\"."," * <br /><br />"," * If the load operation succeeds and one or more of the loaded attributes"," * differ from this model's current attributes, a `change` event will be fired."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'load' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method loadPromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason) (examine reason.message).","**/","","/**","  * Loads this model from the server.<br />","  * This method delegates to the `sync()` method to perform the actual load","  * operation, which is an asynchronous action. Specify a 'callback' function to","  * be notified of success or failure.","  * <br /><br />","  * An unsuccessful load operation will fire an `error` event with the `src` value \"load\".","  * <br /><br />","  * If the load operation succeeds and one or more of the loaded attributes","  * differ from this model's current attributes, a `change` event will be fired.","  * <br /><br />","  * To keep track of the proccess, it is preferable to use <b>loadPromise()</b>.<br />","  * This method will fire 2 events: 'loadstart' before syncing and 'load' or ERROR after syncing.","  * <br /><br />","  * <b>CAUTION</b> The sync-method with action 'load' <b>must call its callback-function</b> in order to work as espected!","  *","  * @method loadappend","  * @param {Object} [options] Options to be passed to `sync()` and to `set()` when setting the loaded attributes.","  *                           It's up to the custom sync implementation to determine what options it supports or requires, if any.","  * @param {callback} [callback] Called when the sync operation finishes.","  *   @param {Error|null} callback.err If an error occurred, this parameter will contain the error. If the sync operation succeeded, 'err' will be null.","  *   @param {Any} callback.response The server's response. This value will be passed to the `parse()` method, which is expected to parse it and return an attribute hash.","  * @chainable"," */","","/**"," * Loads this model from the server."," * <br /><br />"," * This method delegates to the `sync()` method to perform the actual load"," * operation, which is an asynchronous action."," * <br /><br />"," * An unsuccessful load operation will fire an `error` event with the `src` value \"load\"."," * <br /><br />"," * If the load operation succeeds and one or more of the loaded attributes"," * differ from this model's current attributes, a `change` event will be fired."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'load' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method loadappendPromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason) (examine reason.message).","**/","","/**"," * Saves this model to the server."," *"," * This method delegates to the `sync()` method to perform the actual save operation, which is an asynchronous action."," * Specify a 'callback' function to be notified of success or failure."," * <br /><br />"," * An unsuccessful save operation will fire an `error` event with the `src` value \"save\"."," * <br /><br />"," * If the save operation succeeds and one or more of the attributes returned in the server's response differ from this model's current attributes,"," * a `change` event will be fired."," * <br /><br />"," * If the operation succeeds, but you let the server return an <b>id=-1</b> then the model is assumed to be destroyed. This will lead to fireing the `destroy` event."," * <br /><br />"," * To keep track of the process, it is preferable to use <b>savePromise()</b>.<br />"," * This method will fire 2 events: 'savestart' before syncing and 'save' or ERROR after syncing."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'save' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method save"," * @param {Object} [options] Options to be passed to `sync()` and to `set()` when setting synced attributes."," *                           It's up to the custom sync implementation to determine what options it supports or requires, if any."," * @param {Function} [callback] Called when the sync operation finishes."," *   @param {Error|null} callback.err If an error occurred or validation failed, this parameter will contain the error."," *                                    If the sync operation succeeded, 'err' will be null."," *   @param {Any} callback.response The server's response. This value will be passed to the `parse()` method,"," *                                  which is expected to parse it and return an attribute hash."," * @chainable","*/","","/**"," * Saves this model to the server."," * <br /><br />"," * This method delegates to the `sync()` method to perform the actual save"," * operation, which is an asynchronous action."," * <br /><br />"," * An unsuccessful save operation will fire an `error` event with the `src` value \"save\"."," * <br /><br />"," * If the save operation succeeds and one or more of the attributes returned in"," * the server's response differ from this model's current attributes, a"," * `change` event will be fired."," * <br /><br />"," * If the operation succeeds, but you let the server return an <b>id=-1</b> then the model is assumed to be destroyed. This will lead to fireing the `destroy` event."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'save' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method savePromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason). (examine reason.message).","**/","","/**"," * Saves this model to the server."," *"," * This method delegates to the `sync()` method to perform the actual save operation, which is an asynchronous action."," * Specify a 'callback' function to be notified of success or failure."," * <br /><br />"," * An unsuccessful save operation will fire an `error` event with the `src` value \"save\"."," * <br /><br />"," * If the save operation succeeds and one or more of the attributes returned in the server's response differ from this model's current attributes,"," * a `change` event will be fired."," * <br /><br />"," * If the operation succeeds, but you let the server return an <b>id=-1</b> then the model is assumed to be destroyed. This will lead to fireing the `destroy` event."," * <br /><br />"," * To keep track of the process, it is preferable to use <b>savePromise()</b>.<br />"," * This method will fire 2 events: 'savestart' before syncing and 'save' or ERROR after syncing."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'save' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method submit"," * @param {Object} [options] Options to be passed to `sync()` and to `set()` when setting synced attributes."," *                           It's up to the custom sync implementation to determine what options it supports or requires, if any."," * @param {Function} [callback] Called when the sync operation finishes."," *   @param {Error|null} callback.err If an error occurred or validation failed, this parameter will contain the error."," *                                    If the sync operation succeeded, 'err' will be null."," *   @param {Any} callback.response The server's response. This value will be passed to the `parse()` method,"," *                                  which is expected to parse it and return an attribute hash."," * @chainable","*/","","/**"," * Saves this model to the server."," * <br /><br />"," * This method delegates to the `sync()` method to perform the actual save"," * operation, which is an asynchronous action."," * <br /><br />"," * An unsuccessful save operation will fire an `error` event with the `src` value \"save\"."," * <br /><br />"," * If the save operation succeeds and one or more of the attributes returned in"," * the server's response differ from this model's current attributes, a"," * `change` event will be fired."," * <br /><br />"," * If the operation succeeds, but you let the server return an <b>id=-1</b> then the model is assumed to be destroyed. This will lead to fireing the `destroy` event."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'save' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method submitPromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason). (examine reason.message).","**/","","YArray.each(","    [LOAD, LOADAPPEND, SAVE, SUBMIT, DESTROYMODELS],","    function(Fn) {","        YModelList.prototype[Fn] = function(options, callback) {","            var instance = this,","                promise;","","            // by overwriting the default 'save'-method we manage to fire 'destroystart'-event.","        /*jshint expr:true */","            (promise=instance[Fn+PROMISE](options)) && callback && promise.then(","                function(response) {","                    callback(null, response);","                },","                function(err) {","                    callback(err);","                }","            );","        /*jshint expr:false */","            return instance;","        };","        YModelList.prototype[Fn+PROMISE] = function (options) {","            return this._createPromise(Fn, options);","        };","    }",");","","/**"," * Private function that creates the promises for all promise-events"," *"," * @method _createPromise"," * @param type {String} Method to create a promise for"," * @param options {Object} options to be send with the event"," * @private"," * @since 0.3","*/","YModelList.prototype._createPromise = function(type, options) {","    var instance = this,","        promise, promiseResolve, promiseReject, extraOptions;","","    promise = new Y.Promise(function (resolve, reject) {","        promiseResolve = resolve;","        promiseReject = reject;","    });","    // we pass the promise, together with the resolve and reject handlers as an option to the event.","    // this way we can fullfill the promise in the defaultFn or prevDefaultFn.","    extraOptions = {","        promise: promise,","        promiseResolve: promiseResolve,","        promiseReject: promiseReject,","        response: '', // making available at the after listener","        parsed: {}, // making available at the after listener","        options: Y.merge(options) // making passing only optins to other events possible","    };","/*jshint expr:true */","    (typeof options==='object') && YObject.each(","        options,","        function(value, key) {","            extraOptions[key] = value;","        }","    );","    // lazy publish the event","    instance[PUBLISHED+type] || (instance[PUBLISHED+type]=instance._publishAsync(type,","                                                                                {","                                                                                  defaultTargetOnly: true,","                                                                                  emitFacade: true,","                                                                                  defaultFn: instance[DEFFN+type],","                                                                                  preventedFn: instance._prevDefFn","                                                                                }","                                                                               ));","/*jshint expr:false */","    instance.fire(type, extraOptions);","    return promise;","};","","/**"," * Destroys all models within this modellist."," * <b>Caution:</b> The current version uses the Model's synclayer, NOT ModelList's synclayer."," *"," * This method delegates to the Model's`sync()` method to perform the actual destroy"," * operation, which is an asynchronous action. Within the Y.Model-class, you <b>must</b> specify a _callback_ function to"," * make the promise work."," *"," * An unsuccessful destroy operation will fire an `error` event with the `src` value \"destroy\"."," *"," * @method _defFn_destroymodels"," * @private"," * @param {Object} [options] Options to be passed to all Model's`sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","**/","YModelList.prototype[DEFFN+DESTROYMODELS] = function(e) {","    var instance = this,","        destroylist = [],","        options = e.options;","","    instance.each(","        function(model) {","            destroylist.push(model.destroyPromise(options));","        }","    );","    Y.batch.apply(Y, destroylist).then(","//            Y.Promise.every(destroylist).then(","        function(response) {","            e.promiseResolve(response);","        },","        function(err) {","            e.promiseReject(new Error(err));","        }","    );","    return e.promise;","};","","/**"," * Loads models from the server and adds them into the ModelList.<br />"," * Previous items will be retained: new will be added.<br /><br />"," *"," * This method delegates to the `sync()` method, by using the 'readappend' action."," * This is an asynchronous action. You <b>must</b> specify a _callback_ function to"," * make the promise work."," *"," * An unsuccessful load operation will fire an `error` event with the `src` value \"loadappend\"."," *"," * If the load operation succeeds and one or more of the loaded attributes"," * differ from this model's current attributes, a `change` event will be fired for every Model."," *"," * @method _defFn_loadappend"," * @param {Object} [options] Options to be passed to `sync()`. The custom sync"," *                 implementation can determine what options it supports or requires, if any."," * @private"," * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","**/","","/**"," * Loads models from the server and adds them into the ModelList.<br />"," * Previous items will be replaced. Use loadappendPromise to append the items.<br /><br />"," *"," * This method delegates to the `sync()` method, by using the 'read' action."," * This is an asynchronous action. You <b>must</b> specify a _callback_ function to"," * make the promise work."," *"," * An unsuccessful load operation will fire an `error` event with the `src` value \"load\"."," *"," * If the load operation succeeds and one or more of the loaded attributes"," * differ from this model's current attributes, a `change` event will be fired for every Model."," *"," * @method _defFn_load"," * @param {Object} [options] Options to be passed to `sync()`. The custom sync"," *                 implementation can determine what options it supports or requires, if any."," * @private"," * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","**/","YArray.each(","    [LOAD, LOADAPPEND],","    function(eventType) {","        YModelList.prototype[DEFFN+eventType] = function (e) {","            var instance = this,","                readsync = (eventType===LOADAPPEND) ? READAPPEND : READ,","                options = e.options,","                errFunc, successFunc;","","            errFunc = function(err) {","                var facade = {","                    options: options,","                    error: err,","                    src: eventType","                };","                instance._lazyFireErrorEvent(facade);","                e.promiseReject(new Error(err));","            };","            successFunc = function(response) {","                var parsed;","                e.response = response;","                parsed = PARSED(response);","                if (parsed.responseText) {","                    // XMLHttpRequest","                    parsed = parsed.responseText;","                }","                e.parsed = parsed;","                //options.append is for compatiblility with previous versions","                // where you could call: loadPromise({append: true});","                if ((eventType===LOADAPPEND) || options.append) {","                    instance.add(parsed, options);","                }","                else {","                    instance.reset(parsed, options);","                }","                e.promiseResolve(response);","            };","            if (instance.syncPromise) {","                // use the syncPromise-layer","                instance._syncTimeoutPromise(readsync, options).then(","                    successFunc,","                    errFunc","                );","            }","            else {","                instance.sync(readsync, options, function (err, response) {","                    if (err) {","                        errFunc(err);","                    }","                    else {","                        successFunc(response);","                    }","                });","            }","            return e.promise;","        };","    }",");","","/**"," * Saves all modified models within this modellist to the server."," * <b>Caution:</b> within the current version the Model's synclayer is used, NOT ModelList's synclayer."," * Therefore, you get multiple requests for all modified Models."," *"," * This method delegates to the Model's`sync()` method to perform the actual save"," * operation, which is an asynchronous action. Within the Y.Model-class, you <b>must</b> specify a _callback_ function to"," * make the promise work."," *"," * An unsuccessful save operation will fire an `error` event with the `src` value \"save\"."," *"," * If the save operation succeeds and one or more of the attributes returned in"," * the server's response differ from this model's current attributes, a"," * `change` event will be fired."," *"," * @method _defFn_save"," * @param {Object} [options] Options to be passed to all Model's`sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," * @private"," * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","**/","YModelList.prototype[DEFFN+SAVE] = function(e) {","    var instance = this,","        savelist = [],","        options = e.options;","    instance.each(","        function(model) {","            if (model.isModified()) {","                savelist.push(model.savePromise(options));","            }","        }","    );","    Y.batch.apply(Y, savelist).then(","//            Y.Promise.every(savelist).then(","        function(response) {","            e.promiseResolve(response);","        },","        function(err) {","            e.promiseReject(new Error(err));","        }","    );","    return e.promise;","};","","/**"," * Submits all models within this modellist to the server."," * <b>Caution:</b> within the current version the Model's synclayer is used, NOT ModelList's synclayer."," * Therefore, you get multiple requests for all Models."," *"," * This method delegates to the Model's`sync()` method to perform the actual submit"," * operation, which is an asynchronous action. Within the Y.Model-class, you <b>must</b> specify a _callback_ function to"," * make the promise work."," *"," * An unsuccessful submit operation will fire an `error` event with the `src` value \"submit\"."," *"," * @method _defFn_submit"," * @param {Object} [options] Options to be passed to all Model's`sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," * @private"," * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","**/","YModelList.prototype[DEFFN+SUBMIT] = function(e) {","    var instance = this,","        submitlist = [],","        options = e.options;","","    instance.each(","        function(model) {","/*jshint expr:true */","            model.submitPromise && submitlist.push(model.submitPromise(options));","/*jshint expr:false */","        }","    );","    Y.batch.apply(Y, submitlist).then(","//            Y.Promise.every(submitlist).then(","        function(response) {","            e.promiseResolve(response);","        },","        function(err) {","            e.promiseReject(new Error(err));","        }","    );","    return e.promise;","};","","/**"," * Fires the ERROR-event and -if not published yet- publish it broadcasted to Y."," * Because the error-event is broadcasted to Y, it can be catched by gallery-itsaerrorreporter."," *"," * @method _lazyFireErrorEvent"," * @param {Object} [facade] eventfacade."," * @private","**/","YModelList.prototype._lazyFireErrorEvent = function(facade) {","    var instance = this;","","    // lazy publish","    if (!instance._errorEvent) {","        instance._errorEvent = instance.publish(ERROR, {","            broadcast: 1","        });","    }","    instance.fire(ERROR, facade);","};","","/**","   * Hack with the help of Luke Smith: https://gist.github.com/lsmith/6664382/d688740bb91f9ecfc3c89456a82f30d35c5095cb","   * Variant of publish(), but works with asynchronious defaultFn and preventedFn.","   *","   * Creates a new custom event of the specified type.  If a custom event","   * by that name already exists, it will not be re-created.  In either","   * case the custom event is returned.","   *","   * @method _publishAsync","   *","   * @param type {String} the type, or name of the event","   * @param opts {object} optional config params.  Valid properties are:","   *","   *  <ul>","   *    <li>","   *   'broadcast': whether or not the YUI instance and YUI global are notified when the event is fired (false)","   *    </li>","   *    <li>","   *   'bubbles': whether or not this event bubbles (true)","   *              Events can only bubble if emitFacade is true.","   *    </li>","   *    <li>","   *   'context': the default execution context for the listeners (this)","   *    </li>","   *    <li>","   *   'defaultFn': the default function to execute when this event fires if preventDefault was not called","   *    </li>","   *    <li>","   *   'emitFacade': whether or not this event emits a facade (false)","   *    </li>","   *    <li>","   *   'prefix': the prefix for this targets events, e.g., 'menu' in 'menu:click'","   *    </li>","   *    <li>","   *   'fireOnce': if an event is configured to fire once, new subscribers after","   *   the fire will be notified immediately.","   *    </li>","   *    <li>","   *   'async': fireOnce event listeners will fire synchronously if the event has already","   *    fired unless async is true.","   *    </li>","   *    <li>","   *   'preventable': whether or not preventDefault() has an effect (true)","   *    </li>","   *    <li>","   *   'preventedFn': a function that is executed when preventDefault is called","   *    </li>","   *    <li>","   *   'queuable': whether or not this event can be queued during bubbling (false)","   *    </li>","   *    <li>","   *   'silent': if silent is true, debug messages are not provided for this event.","   *    </li>","   *    <li>","   *   'stoppedFn': a function that is executed when stopPropagation is called","   *    </li>","   *","   *    <li>","   *   'monitored': specifies whether or not this event should send notifications about","   *   when the event has been attached, detached, or published.","   *    </li>","   *    <li>","   *   'type': the event type (valid option if not provided as the first parameter to publish)","   *    </li>","   *  </ul>","   *","   *  @private","   *  @return {CustomEvent} the custom event","   *","  **/","YModelList.prototype._publishAsync = function(type, opts) {","    var instance = this,","        asyncEvent = this.publish(type, opts);","","    asyncEvent._firing = new Y.Promise(function (resolve) { resolve(); });","","    asyncEvent.fire = function (data) {","        var args  = Y.Array(arguments, 0, true),","            stack = {","                id: asyncEvent.id,","                next: asyncEvent,","                silent: asyncEvent.silent,","                stopped: 0,","                prevented: 0,","                bubbling: null,","                type: asyncEvent.type,","                defaultTargetOnly: asyncEvent.defaultTargetOnly","            }, next;","","        asyncEvent._firing = asyncEvent._firing.then(function () {","            asyncEvent.details = args;","            // Execute on() subscribers","            var subs = asyncEvent._subscribers,","                args2 = [],","                e, i, len;","","                args2.push.apply(args2, data);","                e = asyncEvent._createFacade(args2);","","            e.target = e.target || instance;","            if (subs) {","                for (i = 0, len = subs.length; i < len; ++i) {","                    try {","                        subs[i].fn.call(subs[i].context, e);","                    }","                    catch (catchErr) {","                    }","                }","            }","            // Execute on() subscribers for each bubble target and their respective targets:","            if (asyncEvent.bubbles && !asyncEvent.stopped) {","                instance.bubble(asyncEvent, args, null, stack);","                e.prevented = Math.max(e.prevented, stack.prevented);","            }","","            // Resolve the _firing promise with either prefentedFn promise if it was prevented, or with a promise for","            // the result of the defaultFn followed by the execution of the after subs.","            return e.prevented ?","                asyncEvent.preventedFn.call(instance, e).then(null, function (reason) {","                    return false;","                }) :","                asyncEvent.defaultFn.call(instance, e).then(function () {","                    // no need to handle 'response' it is merged into 'e' within the defaultfunction","                    // Execute after() subscribers","","                    subs = asyncEvent._afters;","                    if (subs) {","                        for (i = 0, len = subs.length; i < len; ++i) {","                            try {","                                subs[i].fn.call(subs[i].context, e);","                            }","                            catch (catchErr) {","                            }","                        }","                    }","                    // Execute after() subscribers for each bubble target and their respective targets:","                    if (stack.afterQueue) {","                        while ((next = stack.afterQueue.last())) {","                            next();","                        }","                    }","","                // Catch errors/preventions and reset the promise state to fulfilled for","                // the next call to fire();","                }).then(null, function (reason) {","                    return false;","                });","        },","        function(reason) {","            var facade = {","                error   : (reason && (reason.message || reason)),","                src     : 'ModelList._publishAsync()'","            };","            instance._lazyFireErrorEvent(facade);","        });","    };","","    asyncEvent._fire = function (args) {","        return asyncEvent.fire(args[0]);","    };","};","","/**"," * Prevented defaultFn as a Promise. Makes internal e.promise to be rejected."," *"," * @method _prevDefFn"," * @param e {EventTarget}"," * @param e.promise {Y.Promise} promise passed by with the eventobject"," * @param e.promiseReject {Function} handle to the reject-method"," * @param e.promiseResolve {Function} handle to the resolve-method"," * @private"," * @since 0.3","*/","YModelList.prototype._prevDefFn = function(e) {","    e.promiseReject(new Error('preventDefaulted'));","};","","/**"," * This method is used internally and returns syncPromise() that is called with 'action'."," * If 'action' is not handled as a Promise -inside syncPromise- then this method will reject the promisi."," *"," * @method _syncTimeoutPromise"," * @param action {String} The sync-action to perform."," * @param [options] {Object} Sync options. The custom synclayer should pass through all options-properties to the server."," * @return {Y.Promise} returned response for each 'action' --> response --> resolve(dataobject) OR reject(reason)."," * The returned 'dataobject' might be an object or a string that can be turned into a json-object"," * @private"," * @since 0.2","*/","YModelList.prototype._syncTimeoutPromise = function(action, options) {","    var instance = this,","          syncpromise;","","    syncpromise = instance.syncPromise(action, options);","    if (!(syncpromise instanceof Y.Promise)) {","        syncpromise = new Y.Promise(function (resolve, reject) {","            var errormessage = 'syncPromise is rejected --> '+action+' not defined as a Promise inside syncPromise()';","            reject(new Error(errormessage));","        });","    }","    return syncpromise;","};","","// for backwards compatibility:","YModelList.prototype.destroyPromise = YModelList.prototype.destroyModelPromise;","","}, 'gallery-2013.10.02-20-26', {","    \"requires\": [","        \"yui-base\",","        \"base-base\",","        \"base-build\",","        \"node-base\",","        \"json-parse\",","        \"promise\",","        \"model\",","        \"model-list\",","        \"gallery-itsamodelsyncpromise\"","    ]","});","","}());"]};
}
var __cov_3GKoR$ZYrmGv8l73dddnpQ = __coverage__['build/gallery-itsamodellistsyncpromise/gallery-itsamodellistsyncpromise.js'];
__cov_3GKoR$ZYrmGv8l73dddnpQ.s['1']++;YUI.add('gallery-itsamodellistsyncpromise',function(Y,NAME){'use strict';__cov_3GKoR$ZYrmGv8l73dddnpQ.f['1']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['2']++;var YModelList=Y.ModelList,YArray=Y.Array,YObject=Y.Object,PUBLISHED='_published',READ='read',APPEND='append',READAPPEND=READ+APPEND,DEFFN='_defFn_',ERROR='error',SAVE='save',SUBMIT='submit',LOAD='load',LOADAPPEND=LOAD+APPEND,DESTROY='destroy',DESTROYMODELS=DESTROY+'models',PROMISE='Promise',PARSED=function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['2']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['3']++;if(typeof response==='string'){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['1'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['4']++;try{__cov_3GKoR$ZYrmGv8l73dddnpQ.s['5']++;return Y.JSON.parse(response);}catch(ex){__cov_3GKoR$ZYrmGv8l73dddnpQ.s['6']++;this.fire(ERROR,{error:ex,response:response,src:'parse'});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['7']++;return{};}}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['1'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['8']++;return(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['2'][0]++,response)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['2'][1]++,{});};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['9']++;YArray.each([LOAD,LOADAPPEND,SAVE,SUBMIT,DESTROYMODELS],function(Fn){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['3']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['10']++;YModelList.prototype[Fn]=function(options,callback){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['4']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['11']++;var instance=this,promise;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['12']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['3'][0]++,promise=instance[Fn+PROMISE](options))&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['3'][1]++,callback)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['3'][2]++,promise.then(function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['5']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['13']++;callback(null,response);},function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['6']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['14']++;callback(err);}));__cov_3GKoR$ZYrmGv8l73dddnpQ.s['15']++;return instance;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['16']++;YModelList.prototype[Fn+PROMISE]=function(options){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['7']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['17']++;return this._createPromise(Fn,options);};});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['18']++;YModelList.prototype._createPromise=function(type,options){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['8']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['19']++;var instance=this,promise,promiseResolve,promiseReject,extraOptions;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['20']++;promise=new Y.Promise(function(resolve,reject){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['9']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['21']++;promiseResolve=resolve;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['22']++;promiseReject=reject;});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['23']++;extraOptions={promise:promise,promiseResolve:promiseResolve,promiseReject:promiseReject,response:'',parsed:{},options:Y.merge(options)};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['24']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['4'][0]++,typeof options==='object')&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['4'][1]++,YObject.each(options,function(value,key){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['10']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['25']++;extraOptions[key]=value;}));__cov_3GKoR$ZYrmGv8l73dddnpQ.s['26']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['5'][0]++,instance[PUBLISHED+type])||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['5'][1]++,instance[PUBLISHED+type]=instance._publishAsync(type,{defaultTargetOnly:true,emitFacade:true,defaultFn:instance[DEFFN+type],preventedFn:instance._prevDefFn}));__cov_3GKoR$ZYrmGv8l73dddnpQ.s['27']++;instance.fire(type,extraOptions);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['28']++;return promise;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['29']++;YModelList.prototype[DEFFN+DESTROYMODELS]=function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['11']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['30']++;var instance=this,destroylist=[],options=e.options;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['31']++;instance.each(function(model){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['12']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['32']++;destroylist.push(model.destroyPromise(options));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['33']++;Y.batch.apply(Y,destroylist).then(function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['13']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['34']++;e.promiseResolve(response);},function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['14']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['35']++;e.promiseReject(new Error(err));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['36']++;return e.promise;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['37']++;YArray.each([LOAD,LOADAPPEND],function(eventType){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['15']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['38']++;YModelList.prototype[DEFFN+eventType]=function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['16']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['39']++;var instance=this,readsync=eventType===LOADAPPEND?(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['6'][0]++,READAPPEND):(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['6'][1]++,READ),options=e.options,errFunc,successFunc;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['40']++;errFunc=function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['17']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['41']++;var facade={options:options,error:err,src:eventType};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['42']++;instance._lazyFireErrorEvent(facade);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['43']++;e.promiseReject(new Error(err));};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['44']++;successFunc=function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['18']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['45']++;var parsed;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['46']++;e.response=response;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['47']++;parsed=PARSED(response);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['48']++;if(parsed.responseText){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['7'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['49']++;parsed=parsed.responseText;}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['7'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['50']++;e.parsed=parsed;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['51']++;if((__cov_3GKoR$ZYrmGv8l73dddnpQ.b['9'][0]++,eventType===LOADAPPEND)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['9'][1]++,options.append)){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['8'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['52']++;instance.add(parsed,options);}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['8'][1]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['53']++;instance.reset(parsed,options);}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['54']++;e.promiseResolve(response);};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['55']++;if(instance.syncPromise){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['10'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['56']++;instance._syncTimeoutPromise(readsync,options).then(successFunc,errFunc);}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['10'][1]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['57']++;instance.sync(readsync,options,function(err,response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['19']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['58']++;if(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['11'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['59']++;errFunc(err);}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['11'][1]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['60']++;successFunc(response);}});}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['61']++;return e.promise;};});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['62']++;YModelList.prototype[DEFFN+SAVE]=function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['20']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['63']++;var instance=this,savelist=[],options=e.options;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['64']++;instance.each(function(model){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['21']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['65']++;if(model.isModified()){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['12'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['66']++;savelist.push(model.savePromise(options));}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['12'][1]++;}});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['67']++;Y.batch.apply(Y,savelist).then(function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['22']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['68']++;e.promiseResolve(response);},function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['23']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['69']++;e.promiseReject(new Error(err));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['70']++;return e.promise;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['71']++;YModelList.prototype[DEFFN+SUBMIT]=function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['24']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['72']++;var instance=this,submitlist=[],options=e.options;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['73']++;instance.each(function(model){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['25']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['74']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['13'][0]++,model.submitPromise)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['13'][1]++,submitlist.push(model.submitPromise(options)));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['75']++;Y.batch.apply(Y,submitlist).then(function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['26']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['76']++;e.promiseResolve(response);},function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['27']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['77']++;e.promiseReject(new Error(err));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['78']++;return e.promise;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['79']++;YModelList.prototype._lazyFireErrorEvent=function(facade){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['28']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['80']++;var instance=this;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['81']++;if(!instance._errorEvent){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['14'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['82']++;instance._errorEvent=instance.publish(ERROR,{broadcast:1});}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['14'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['83']++;instance.fire(ERROR,facade);};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['84']++;YModelList.prototype._publishAsync=function(type,opts){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['29']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['85']++;var instance=this,asyncEvent=this.publish(type,opts);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['86']++;asyncEvent._firing=new Y.Promise(function(resolve){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['30']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['87']++;resolve();});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['88']++;asyncEvent.fire=function(data){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['31']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['89']++;var args=Y.Array(arguments,0,true),stack={id:asyncEvent.id,next:asyncEvent,silent:asyncEvent.silent,stopped:0,prevented:0,bubbling:null,type:asyncEvent.type,defaultTargetOnly:asyncEvent.defaultTargetOnly},next;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['90']++;asyncEvent._firing=asyncEvent._firing.then(function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['32']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['91']++;asyncEvent.details=args;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['92']++;var subs=asyncEvent._subscribers,args2=[],e,i,len;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['93']++;args2.push.apply(args2,data);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['94']++;e=asyncEvent._createFacade(args2);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['95']++;e.target=(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['15'][0]++,e.target)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['15'][1]++,instance);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['96']++;if(subs){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['16'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['97']++;for(i=0,len=subs.length;i<len;++i){__cov_3GKoR$ZYrmGv8l73dddnpQ.s['98']++;try{__cov_3GKoR$ZYrmGv8l73dddnpQ.s['99']++;subs[i].fn.call(subs[i].context,e);}catch(catchErr){}}}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['16'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['100']++;if((__cov_3GKoR$ZYrmGv8l73dddnpQ.b['18'][0]++,asyncEvent.bubbles)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['18'][1]++,!asyncEvent.stopped)){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['17'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['101']++;instance.bubble(asyncEvent,args,null,stack);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['102']++;e.prevented=Math.max(e.prevented,stack.prevented);}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['17'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['103']++;return e.prevented?(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['19'][0]++,asyncEvent.preventedFn.call(instance,e).then(null,function(reason){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['33']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['104']++;return false;})):(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['19'][1]++,asyncEvent.defaultFn.call(instance,e).then(function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['34']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['105']++;subs=asyncEvent._afters;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['106']++;if(subs){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['20'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['107']++;for(i=0,len=subs.length;i<len;++i){__cov_3GKoR$ZYrmGv8l73dddnpQ.s['108']++;try{__cov_3GKoR$ZYrmGv8l73dddnpQ.s['109']++;subs[i].fn.call(subs[i].context,e);}catch(catchErr){}}}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['20'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['110']++;if(stack.afterQueue){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['21'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['111']++;while(next=stack.afterQueue.last()){__cov_3GKoR$ZYrmGv8l73dddnpQ.s['112']++;next();}}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['21'][1]++;}}).then(null,function(reason){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['35']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['113']++;return false;}));},function(reason){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['36']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['114']++;var facade={error:(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['22'][0]++,reason)&&((__cov_3GKoR$ZYrmGv8l73dddnpQ.b['22'][1]++,reason.message)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['22'][2]++,reason)),src:'ModelList._publishAsync()'};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['115']++;instance._lazyFireErrorEvent(facade);});};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['116']++;asyncEvent._fire=function(args){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['37']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['117']++;return asyncEvent.fire(args[0]);};};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['118']++;YModelList.prototype._prevDefFn=function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['38']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['119']++;e.promiseReject(new Error('preventDefaulted'));};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['120']++;YModelList.prototype._syncTimeoutPromise=function(action,options){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['39']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['121']++;var instance=this,syncpromise;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['122']++;syncpromise=instance.syncPromise(action,options);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['123']++;if(!(syncpromise instanceof Y.Promise)){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['23'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['124']++;syncpromise=new Y.Promise(function(resolve,reject){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['40']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['125']++;var errormessage='syncPromise is rejected --> '+action+' not defined as a Promise inside syncPromise()';__cov_3GKoR$ZYrmGv8l73dddnpQ.s['126']++;reject(new Error(errormessage));});}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['23'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['127']++;return syncpromise;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['128']++;YModelList.prototype.destroyPromise=YModelList.prototype.destroyModelPromise;},'gallery-2013.10.02-20-26',{'requires':['yui-base','base-base','base-build','node-base','json-parse','promise','model','model-list','gallery-itsamodelsyncpromise']});
